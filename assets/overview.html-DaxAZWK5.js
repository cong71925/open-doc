import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,b as s,d as i,f as l}from"./app-BPf6K1Jt.js";const c={},r=n("h2",{id:"组合式函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#组合式函数"},[n("span",null,"组合式函数")])],-1),u={href:"https://cn.vuejs.org/guide/reusability/composables.html",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="和-mixin-的对比" tabindex="-1"><a class="header-anchor" href="#和-mixin-的对比"><span>和 Mixin 的对比</span></a></h2><p>以<code>BaseList</code>为例，<code>BaseList</code>实现的是Jeecg中的mixin的<code>JeecgListMixin</code>，基本覆盖了表格操作的功能。</p><p>比起使用<code>mixin</code>写法，<code>hooks</code>写法的优点在于：</p><ul><li><p>更好的类型支持。</p></li><li><p>按需引用。<code>mixin</code>的所有选项默认是在组件内全局引入的，要禁用某些属性和方法时只能对其进行重载；而使用<code>hooks</code>可以选择性的引入需要的属性和方法。</p></li><li><p>支持面向对象。如要实现一张新表单的hooks：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> BaseListHook <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/baseList&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseListHookOptions<span class="token punctuation">,</span> Record <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/baseList&#39;</span>
<span class="token doc-comment comment">/** 定义demo表的字段和类型 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DemoItem</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span>
    birthday<span class="token operator">:</span> <span class="token builtin">string</span>
    dzb<span class="token operator">:</span> <span class="token builtin">string</span>
    mz<span class="token operator">:</span> <span class="token builtin">string</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
    phone<span class="token operator">:</span> <span class="token builtin">string</span>
    px<span class="token operator">:</span> <span class="token builtin">number</span>
    rdAge<span class="token operator">:</span> <span class="token builtin">string</span>
    rdTime<span class="token operator">:</span> <span class="token builtin">string</span>
    rdnl<span class="token operator">:</span> <span class="token builtin">number</span>
    remark<span class="token operator">:</span> <span class="token builtin">string</span>
    sex<span class="token operator">:</span> <span class="token builtin">string</span>
    sex_dictText<span class="token operator">:</span> <span class="token builtin">string</span>
    sfzh<span class="token operator">:</span> <span class="token builtin">string</span>
    sysOrgCode<span class="token operator">:</span> <span class="token builtin">string</span>
    xl<span class="token operator">:</span> <span class="token builtin">string</span>
    xl_dictText<span class="token operator">:</span> <span class="token builtin">string</span>
    zzTime<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/** 将类型作为泛型参数 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DemoRecord</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>DemoItem<span class="token operator">&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">DemoList</span> <span class="token keyword">extends</span> <span class="token class-name">BaseListHook<span class="token operator">&lt;</span>DemoItem<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> BaseListHookOptions<span class="token operator">&lt;</span>DemoItem<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/** 定义crud的接口地址 */</span>
        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token punctuation">{</span> list<span class="token operator">:</span> <span class="token string">&#39;zzgl/ztZzgl/list&#39;</span> <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token punctuation">,</span> <span class="token operator">...</span>options <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/** 导出为useHooks风格函数 符合Vue官方规范 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useDemoList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> BaseListHookOptions<span class="token operator">&lt;</span>DemoItem<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">DemoList</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此处，<code>DemoList</code>继承自<code>baseList</code>，子类便可直接使用父类的属性与方法，实现了更好的复用性，并通过定义表的字段和字段类型，实现了完整的类型推导。</p><p>在业务Vue文件中使用<code>DemoList</code>：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-table</span>
        <span class="token attr-name">:dataSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>columns<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:pagination</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pagination<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerTableChange<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">rowKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:row-selection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ selectedRowKeys, onChange: handlerSelectionChange }<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useDemoList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/demoList&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> dataSource<span class="token punctuation">,</span> pagination<span class="token punctuation">,</span> handlerTableChange<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> handlerSelectionChange<span class="token punctuation">,</span> selectedRowKeys <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useDemoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
columns<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">sorter</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">sorter</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,4);function d(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[s("详见"),n("a",u,[s("Vue 官方文档中的组合式函数章节"),i(a)]),s("。")]),k])}const h=t(c,[["render",d],["__file","overview.html.vue"]]),y=JSON.parse('{"path":"/map/hooks/overview.html","title":"概述","lang":"zh-CN","frontmatter":{"title":"概述","order":1,"date":"2024-10-25T00:00:00.000Z","category":["开发文档","地图"],"description":"组合式函数 详见Vue 官方文档中的组合式函数章节。 和 Mixin 的对比 以BaseList为例，BaseList实现的是Jeecg中的mixin的JeecgListMixin，基本覆盖了表格操作的功能。 比起使用mixin写法，hooks写法的优点在于： 更好的类型支持。 按需引用。mixin的所有选项默认是在组件内全局引入的，要禁用某些属性和方...","head":[["meta",{"property":"og:url","content":"https://doc.congvps.fun/map/hooks/overview.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"组合式函数 详见Vue 官方文档中的组合式函数章节。 和 Mixin 的对比 以BaseList为例，BaseList实现的是Jeecg中的mixin的JeecgListMixin，基本覆盖了表格操作的功能。 比起使用mixin写法，hooks写法的优点在于： 更好的类型支持。 按需引用。mixin的所有选项默认是在组件内全局引入的，要禁用某些属性和方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-25T09:18:07.000Z"}],["meta",{"property":"article:author","content":"狭雾"}],["meta",{"property":"article:published_time","content":"2024-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-25T09:18:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-25T09:18:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"狭雾\\",\\"url\\":\\"https://congvps.fun\\"}]}"]]},"headers":[{"level":2,"title":"组合式函数","slug":"组合式函数","link":"#组合式函数","children":[]},{"level":2,"title":"和 Mixin 的对比","slug":"和-mixin-的对比","link":"#和-mixin-的对比","children":[]}],"git":{"createdTime":1729847887000,"updatedTime":1729847887000,"contributors":[{"name":"cong71925","email":"cong71925@gmail.com","commits":1}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"map/hooks/overview.md","localizedDate":"2024年10月25日","autoDesc":true}');export{h as comp,y as data};
