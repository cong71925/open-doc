import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as r,d as u,w as s,f as p,b as t,a as n}from"./app-BPf6K1Jt.js";const d={},v=p(`<h2 id="webpack-和-vite" tabindex="-1"><a class="header-anchor" href="#webpack-和-vite"><span>Webpack 和 Vite</span></a></h2><p>同样的，在项目的根目录下的<code>package.json</code>文件，其中的<code>&quot;scripts&quot;</code>属性一般也会包含编译打包的的脚本：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-antd-jeecg&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.4.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build:test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build --mode test&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service lint&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上述文件为例，该项目的启动脚本应为<code>&quot;scripts&quot;</code>属性中的<code>&quot;serve&quot;</code>，在 PowerShell 或终端中输入如下命令：</p>`,4),k=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),t(` run build
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),m=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`npx vue-cli-service build
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),b=p(`<p>等待脚本执行完毕，PowerShell 或终端中输出如下与下方类似的信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>vite v5.3.1 building <span class="token keyword">for</span> production<span class="token punctuation">..</span>.
✓ <span class="token number">41</span> modules transformed.
dist/index.html                   <span class="token number">0.46</span> kB │ gzip:  <span class="token number">0.30</span> kB
dist/assets/react-CHdo91hT.svg    <span class="token number">4.13</span> kB │ gzip:  <span class="token number">2.05</span> kB
dist/assets/Home-Bx9V9zN2.css     <span class="token number">0.48</span> kB │ gzip:  <span class="token number">0.31</span> kB
dist/assets/index-BPvgi06w.css    <span class="token number">0.92</span> kB │ gzip:  <span class="token number">0.50</span> kB
dist/assets/Player-C7xff9iQ.js    <span class="token number">0.22</span> kB │ gzip:  <span class="token number">0.21</span> kB
dist/assets/Home-wRyz_nXv.js      <span class="token number">0.86</span> kB │ gzip:  <span class="token number">0.45</span> kB
dist/assets/index-Dt8aTw03.js   <span class="token number">202.22</span> kB │ gzip: <span class="token number">66.13</span> kB
✓ built <span class="token keyword">in</span> 947ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，打包就完成了，由上方的输出信息可以看出，打包生成的文件路径都在<code>dist</code>目录下，将<code>dist</code>目录下的文件放到服务器相应位置即可。</p><h2 id="uni-app" tabindex="-1"><a class="header-anchor" href="#uni-app"><span>Uni-App</span></a></h2><p>Uni-App作为一款跨平台的框架，对应的每个平台都要单独打包。</p><h3 id="打包至-web-环境" tabindex="-1"><a class="header-anchor" href="#打包至-web-环境"><span>打包至 Web 环境</span></a></h3><ol><li>打开 uni-app 项目的页面，点 HBuilderX 右上角的发行按钮。</li><li>点击网站-PC Web 或手机H5。</li><li>在弹出的窗口输入网站标题，点击发行。</li><li>打包完成后，会在 HBuilderX 下方的控制台显示编译成功并显示打包后的路径，一般为项目目录下的<code>unpackage\\dist\\build\\web</code>文件夹中。</li><li>将打包好的文件部署到服务器上。</li></ol><h3 id="打包到-android-环境" tabindex="-1"><a class="header-anchor" href="#打包到-android-环境"><span>打包到 Android 环境</span></a></h3><p>假如你或者你的团队是初次打包到 Android 环境，那么你还需要先生成数字证书文件（.keystore文件）用于后续APK文件的签名，用于表明开发者的身份和APK的合法性。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请确保妥善保管好 keystore 文件和密码，以防丢失。</p><p>如果你不清楚该项目是否已有现成的已生成的 keystore 文件，请联系你的项目管理员。</p></div><p>Android 系统使用包名<code>package name</code>来判定应用程序的同一性，但是由于包名可以由开发者自由设置，为了保护应用程序不被其他开发者开发的同包名应用覆盖，用于发布的 Android 应用程序需要加上开发者签名。签名是保证app不被第三方恶意替换。</p><p>在应用程序被升级的时候，Android 系统将会验证被升级的应用程序包与升级后的应用程序包是否使用了同样的开发者签名，如果一致，该应用程序可以被升级；如果不一致，那么将被视为非同一开发者开发的应用程序，用户需要先卸载已经安装的应用，然后再安装新应用。在卸载的过程中，应用在android系统中所保存的设置信息<code>SavedPreferences</code>将被删除，以保护应用本地保存的资料不被盗取。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>keystore 文件和密码一旦泄露，可能会被恶意攻击者编写恶意软件用于诱骗安装到用户设备上，造成安全风险。</p></div><p>如果已有 keystore 文件，那么下方的生成 keystore 文件部分可以跳过：</p><p>Android证书的生成是自助和免费的，不需要审批或付费。</p><p>可以使用JRE环境中的keytool命令生成。以下是windows平台生成证书的方法：</p><h4 id="安装jre环境-推荐使用jre8环境-如已有可跳过" tabindex="-1"><a class="header-anchor" href="#安装jre环境-推荐使用jre8环境-如已有可跳过"><span>安装JRE环境（推荐使用JRE8环境，如已有可跳过）</span></a></h4><p>可从Oracle官方下载jre安装包：https://www.oracle.com/java/technologies/downloads/#java8</p><p>下面以Windows平台，jre安装目录为“C:\\Program Files\\Java\\jre1.8.0_201”为例，实际操作时请修改为自己安装目录</p><p>建议将JRE安装路径添加到系统环境变量，已配置可跳过此章节</p><p>打开命令行（cmd），输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>d:  
<span class="token builtin class-name">set</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>%<span class="token environment constant">PATH</span>%<span class="token punctuation">;</span><span class="token string">&quot;C:\\Program Files\\Java\\jre1.8.0_201<span class="token entity" title="\\b">\\b</span>in&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成签名证书" tabindex="-1"><a class="header-anchor" href="#生成签名证书"><span>生成签名证书</span></a></h4><p>使用keytool -genkey命令生成证书：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>keytool <span class="token parameter variable">-genkey</span> <span class="token parameter variable">-alias</span> testalias <span class="token parameter variable">-keyalg</span> RSA <span class="token parameter variable">-keysize</span> <span class="token number">2048</span> <span class="token parameter variable">-validity</span> <span class="token number">36500</span> <span class="token parameter variable">-keystore</span> test.keystore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回车后会提示：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Enter keystore password:  //输入证书文件密码，输入完成回车  
Re-enter new password:   //再次输入证书文件密码，输入完成回车  
What is your first and last name?  
  <span class="token punctuation">[</span>Unknown<span class="token punctuation">]</span>:  //输入名字和姓氏，输入完成回车  
What is the name of your organizational unit?  
  <span class="token punctuation">[</span>Unknown<span class="token punctuation">]</span>:  //输入组织单位名称，输入完成回车  
What is the name of your organization?  
  <span class="token punctuation">[</span>Unknown<span class="token punctuation">]</span>:  //输入组织名称，输入完成回车  
What is the name of your City or Locality?  
  <span class="token punctuation">[</span>Unknown<span class="token punctuation">]</span>:  //输入城市或区域名称，输入完成回车  
What is the name of your State or Province?  
  <span class="token punctuation">[</span>Unknown<span class="token punctuation">]</span>:  //输入省/市/自治区名称，输入完成回车  
What is the two-letter country code <span class="token keyword">for</span> this unit?  
  <span class="token punctuation">[</span>Unknown<span class="token punctuation">]</span>:  //输入国家/地区代号（两个字母），中国为CN，输入完成回车  
Is <span class="token assign-left variable">CN</span><span class="token operator">=</span>XX, <span class="token assign-left variable">OU</span><span class="token operator">=</span>XX, <span class="token assign-left variable">O</span><span class="token operator">=</span>XX, <span class="token assign-left variable">L</span><span class="token operator">=</span>XX, <span class="token assign-left variable">ST</span><span class="token operator">=</span>XX, <span class="token assign-left variable">C</span><span class="token operator">=</span>XX correct?  
  <span class="token punctuation">[</span>no<span class="token punctuation">]</span>:  //确认上面输入的内容是否正确，输入y，回车  

Enter key password <span class="token keyword">for</span> <span class="token operator">&lt;</span>testalias<span class="token operator">&gt;</span>  
        <span class="token punctuation">(</span>RETURN <span class="token keyword">if</span> same as keystore password<span class="token punctuation">)</span>:  //确认证书密码与证书文件密码一样（HBuilder<span class="token operator">|</span>HBuilderX要求这两个密码一致），直接回车就可以
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看证书信息" tabindex="-1"><a class="header-anchor" href="#查看证书信息"><span>查看证书信息</span></a></h4><p>可以使用以下命令查看：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>keytool <span class="token parameter variable">-list</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-keystore</span> test.keystore  
Enter keystore password: //输入密码，回车
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会输出以下格式信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Keystore type: PKCS12    
Keystore provider: SUN    

Your keystore contains <span class="token number">1</span> entry    

Alias name: <span class="token builtin class-name">test</span>    
Creation date: <span class="token number">2019</span>-10-28    
Entry type: PrivateKeyEntry    
Certificate chain length: <span class="token number">1</span>    
Certificate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>:    
Owner: <span class="token assign-left variable">CN</span><span class="token operator">=</span>Tester, <span class="token assign-left variable">OU</span><span class="token operator">=</span>Test, <span class="token assign-left variable">O</span><span class="token operator">=</span>Test, <span class="token assign-left variable">L</span><span class="token operator">=</span>HD, <span class="token assign-left variable">ST</span><span class="token operator">=</span>BJ, <span class="token assign-left variable">C</span><span class="token operator">=</span>CN    
Issuer: <span class="token assign-left variable">CN</span><span class="token operator">=</span>Tester, <span class="token assign-left variable">OU</span><span class="token operator">=</span>Test, <span class="token assign-left variable">O</span><span class="token operator">=</span>Test, <span class="token assign-left variable">L</span><span class="token operator">=</span>HD, <span class="token assign-left variable">ST</span><span class="token operator">=</span>BJ, <span class="token assign-left variable">C</span><span class="token operator">=</span>CN    
Serial number: 7dd12840    
Valid from: Fri Jul <span class="token number">26</span> <span class="token number">20</span>:52:56 CST <span class="token number">2019</span> until: Sun Jul 02 <span class="token number">20</span>:52:56 CST <span class="token number">2119</span>    
Certificate fingerprints:    
         MD5:  F9:F6:C8:1F:DB:AB:50:14:7D:6F:2C:4F:CE:E6:0A:A5    
         SHA1: BB:AC:E2:2F:97:3B:18:02:E7:D6:69:A3:7A:28:EF:D2:3F:A3:68:E7    
         SHA256: <span class="token number">24</span>:11:7D:E7:36:12:BC:FE:AF:2A:6A:24:BD:04:4F:2E:33:E5:2D:41:96:5F:50:4D:74:17:7F:4F:E2:55:EB:26    
Signature algorithm name: SHA256withRSA    
Subject Public Key Algorithm: <span class="token number">2048</span>-bit RSA key    
Version: <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用证书进行打包" tabindex="-1"><a class="header-anchor" href="#使用证书进行打包"><span>使用证书进行打包</span></a></h4><ol><li>打开 uni-app 项目的页面，点 HBuilderX 右上角的发行按钮。</li><li>点击原生APP-云打包。</li><li>在弹出的表单内勾选使用自有证书，并填写相关信息，如证书别名、证书私钥密码、证书文件地址（即keystore文件地址）等。</li><li>勾选打正式包和传统打包，点击打包按钮。</li><li>等待打包完成，打包完成后会在控制台生成如下信息：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>项目 <span class="token builtin class-name">test</span> <span class="token punctuation">[</span>__UNI__B0001<span class="token punctuation">]</span>打包成功：
类型: Android自有证书 下载地址: https://app.liuyingyong.cn/build/download/**** （注意该地址为临时下载地址，只能下载5次）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>下载生成的 APK 文件，部署到服务器上。</li></ol><h3 id="打包到-wgt-包实现热更新" tabindex="-1"><a class="header-anchor" href="#打包到-wgt-包实现热更新"><span>打包到 Wgt 包实现热更新</span></a></h3><p>HBuilderX 自 1.6.5 起，uni-app 支持生成 App 资源升级包wgt，可以让用户在不重新安装APK的情况下实现对应用的热更新。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不支持资源升级包wgt的情况如下：</p><ul><li>SDK 部分有调整，比如新增了 Maps 模块等，不可通过此方式升级，必须通过整包的方式升级。</li><li>原生插件的增改，同样不能使用此方式。</li><li>对于老的非自定义组件编译模式，这种模式已经被淘汰下线。但以防万一也需要说明下，老的非自定义组件编译模式，如果之前工程没有 nvue 文件，但更新中新增了 nvue 文件，不能使用此方式。因为非自定义组件编译模式如果没有nvue文件是不会打包weex引擎进去的，原生引擎无法动态添加。自定义组件模式默认就含着weex引擎，不管工程下有没有nvue文件。</li></ul></div><h4 id="打包步骤" tabindex="-1"><a class="header-anchor" href="#打包步骤"><span>打包步骤</span></a></h4><ol><li>打开 uni-app 项目的页面，点 HBuilderX 右上角的发行按钮。</li><li>点击原生APP-制作应用wgt包。</li><li>在弹出的弹窗内选择生成的wgt包的存放路径。</li><li>点击确定按钮，开始打包。</li><li>等待打包完成，打包完成后会在控制台生成如下信息：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>HBuilder<span class="token punctuation">]</span> <span class="token number">12</span>:00:00.000 项目 <span class="token string">&#39;test&#39;</span>导出成功，路径为：D:<span class="token punctuation">\\</span>workspace<span class="token punctuation">\\</span>test<span class="token punctuation">\\</span>unpackage<span class="token punctuation">\\</span>release<span class="token punctuation">\\</span>__UNI__B0001.wgt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>将生成的wgt文件部署到服务器上。</li></ol><h4 id="热更新代码示例" tabindex="-1"><a class="header-anchor" href="#热更新代码示例"><span>热更新代码示例</span></a></h4><p>在 Uni-App 中实现检测并自动下载安装热更新wgt包的代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在 App.vue 的 onLaunch 中检测升级</span>
<span class="token comment">// #ifdef APP-PLUS  </span>
plus<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>plus<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>appid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">widgetInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* versionCode 版本号：100 ;version 版本名称 1.0.0 */</span>
  uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://www.example.com/update/&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> success<span class="token punctuation">,</span> version<span class="token punctuation">,</span> wgtUrl <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success <span class="token operator">||</span> version <span class="token operator">&lt;=</span> widgetInfo<span class="token punctuation">.</span>versionCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      uni<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> wgtUrl<span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> tempFilePath<span class="token punctuation">,</span> statusCode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
          <span class="token punctuation">}</span>
          plus<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>
            tempFilePath<span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">force</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              plus<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;install fail...&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//#endif</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="纯静态html项目" tabindex="-1"><a class="header-anchor" href="#纯静态html项目"><span>纯静态HTML项目</span></a></h2><p>纯静态的项目无需打包，它本身就是现代化前端构建工具的打包产物。</p>`,48);function h(g,y){const i=o("CodeTabs");return c(),r("div",null,[v,u(i,{id:"10",data:[{id:"执行scripts中定义的serve脚本"},{id:"使用npx直接执行脚本"}]},{title0:s(({value:a,isActive:e})=>[t("执行scripts中定义的serve脚本")]),title1:s(({value:a,isActive:e})=>[t("使用npx直接执行脚本")]),tab0:s(({value:a,isActive:e})=>[k]),tab1:s(({value:a,isActive:e})=>[m]),_:1}),b])}const A=l(d,[["render",h],["__file","build.html.vue"]]),x=JSON.parse('{"path":"/doc/build.html","title":"打包及部署","lang":"zh-CN","frontmatter":{"title":"打包及部署","order":6,"date":"2024-06-19T00:00:00.000Z","category":["开发文档"],"description":"Webpack 和 Vite 同样的，在项目的根目录下的package.json文件，其中的\\"scripts\\"属性一般也会包含编译打包的的脚本： 以上述文件为例，该项目的启动脚本应为\\"scripts\\"属性中的\\"serve\\"，在 PowerShell 或终端中输入如下命令： 等待脚本执行完毕，PowerShell 或终端中输出如下与下方类似的信息： 至此...","head":[["meta",{"property":"og:url","content":"https://doc.congvps.fun/doc/build.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"打包及部署"}],["meta",{"property":"og:description","content":"Webpack 和 Vite 同样的，在项目的根目录下的package.json文件，其中的\\"scripts\\"属性一般也会包含编译打包的的脚本： 以上述文件为例，该项目的启动脚本应为\\"scripts\\"属性中的\\"serve\\"，在 PowerShell 或终端中输入如下命令： 等待脚本执行完毕，PowerShell 或终端中输出如下与下方类似的信息： 至此..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T08:54:26.000Z"}],["meta",{"property":"article:author","content":"狭雾"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T08:54:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打包及部署\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-22T08:54:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"狭雾\\",\\"url\\":\\"https://congvps.fun\\"}]}"]]},"headers":[{"level":2,"title":"Webpack 和 Vite","slug":"webpack-和-vite","link":"#webpack-和-vite","children":[]},{"level":2,"title":"Uni-App","slug":"uni-app","link":"#uni-app","children":[{"level":3,"title":"打包至 Web 环境","slug":"打包至-web-环境","link":"#打包至-web-环境","children":[]},{"level":3,"title":"打包到 Android 环境","slug":"打包到-android-环境","link":"#打包到-android-环境","children":[]},{"level":3,"title":"打包到 Wgt 包实现热更新","slug":"打包到-wgt-包实现热更新","link":"#打包到-wgt-包实现热更新","children":[]}]},{"level":2,"title":"纯静态HTML项目","slug":"纯静态html项目","link":"#纯静态html项目","children":[]}],"git":{"createdTime":1718789405000,"updatedTime":1729587266000,"contributors":[{"name":"郑家聪","email":"cong71925@gmail.com","commits":3},{"name":"cong71925","email":"cong71925@gmail.com","commits":1}]},"readingTime":{"minutes":7.62,"words":2285},"filePathRelative":"doc/build.md","localizedDate":"2024年6月19日","autoDesc":true}');export{A as comp,x as data};
