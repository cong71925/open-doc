import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,f as e}from"./app-BPf6K1Jt.js";const t={},i=e(`<p>widgets可以理解为独立的业务组件，继承于原生JS技术栈的思想和概念。</p><p>在当前Vue3版本中实现原理与使用方法并不相同。</p><p>widgets一般放在<code>/src/widgets</code>下。</p><h2 id="编写widgets" tabindex="-1"><a class="header-anchor" href="#编写widgets"><span>编写Widgets</span></a></h2><ol><li>在<code>/src/widgets</code>下新建对应的文件夹，此次示例中新建的widget名称为demo。</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>└─src
    └─widgets           
        └─demo          - 新建的Widget组件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在新建的widget文件中新建入口vue文件。</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>└─src
    └─widgets           
        └─demo          
            └─index.vue - 新建的入口文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在入口文件编写业务代码。</li></ol><h2 id="配置widgets" tabindex="-1"><a class="header-anchor" href="#配置widgets"><span>配置Widgets</span></a></h2><p>编写好的Widgets，还需要导入与正确配置，才能正常使用。</p><p>Widgets通过pinia仓库全局统一管理，在<code>/src/store/widgets.ts</code>文件中配置。</p><p>以上一个章节新建的demo widget为例，在widgets.ts中导入和配置:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent<span class="token punctuation">,</span> markRaw<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span>
  component<span class="token operator">:</span> Component
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  visible<span class="token operator">:</span> <span class="token builtin">boolean</span>
  group<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WidgetsStoreState</span> <span class="token punctuation">{</span>
  widgets<span class="token operator">:</span> Widget<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> widgetsStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;widgets&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  state<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> WidgetsStoreState <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    widgets<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span>
        <span class="token doc-comment comment">/** 传入的widget的vue入口文件 */</span>
        component<span class="token operator">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/widgets/demo/index.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> <span class="token string">&#39;测试widget&#39;</span><span class="token punctuation">,</span>
        <span class="token doc-comment comment">/** 初始是否可见 */</span>
        visible<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token doc-comment comment">/** 隶属于的group */</span>
        group<span class="token operator">:</span> <span class="token string">&#39;base&#39;</span><span class="token punctuation">,</span>
        <span class="token doc-comment comment">/** 传入vue入口文件的props的初始数据 */</span>
        payload<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> widgetsStore

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="激活widgets" tabindex="-1"><a class="header-anchor" href="#激活widgets"><span>激活widgets</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> useWidgets <span class="token keyword">from</span> <span class="token string">&#39;@/store/widgets&#39;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useWidgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/** 激活widgets */</span>
store<span class="token punctuation">.</span><span class="token function">activeWidgets</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/** 
 * 激活widgets同时关闭同一个group内的所有widgets
 * 使用该api时相当于group内的widgets是互斥的，只会有一个widget处于激活状态
 */</span>
store<span class="token punctuation">.</span><span class="token function">activeWidgetsInGrouop</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/** 激活widgets同时传递数据 */</span>
store<span class="token punctuation">.</span><span class="token function">activeWidgets</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;标题&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关闭widgets" tabindex="-1"><a class="header-anchor" href="#关闭widgets"><span>关闭widgets</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> useWidgets <span class="token keyword">from</span> <span class="token string">&#39;@/store/widgets&#39;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useWidgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">disableWidgets</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="往widgets内传递数据" tabindex="-1"><a class="header-anchor" href="#往widgets内传递数据"><span>往widgets内传递数据</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> useWidgets <span class="token keyword">from</span> <span class="token string">&#39;@/store/widgets&#39;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useWidgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">updateWidgets</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;标题&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),p=[i];function o(c,l){return n(),a("div",null,p)}const u=s(t,[["render",o],["__file","widgets.html.vue"]]),k=JSON.parse('{"path":"/map/widgets.html","title":"Widgets","lang":"zh-CN","frontmatter":{"title":"Widgets","order":5,"date":"2024-10-23T00:00:00.000Z","category":["开发文档","地图"],"description":"widgets可以理解为独立的业务组件，继承于原生JS技术栈的思想和概念。 在当前Vue3版本中实现原理与使用方法并不相同。 widgets一般放在/src/widgets下。 编写Widgets 在/src/widgets下新建对应的文件夹，此次示例中新建的widget名称为demo。 在新建的widget文件中新建入口vue文件。 在入口文件编写业...","head":[["meta",{"property":"og:url","content":"https://doc.congvps.fun/map/widgets.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Widgets"}],["meta",{"property":"og:description","content":"widgets可以理解为独立的业务组件，继承于原生JS技术栈的思想和概念。 在当前Vue3版本中实现原理与使用方法并不相同。 widgets一般放在/src/widgets下。 编写Widgets 在/src/widgets下新建对应的文件夹，此次示例中新建的widget名称为demo。 在新建的widget文件中新建入口vue文件。 在入口文件编写业..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T07:18:16.000Z"}],["meta",{"property":"article:author","content":"狭雾"}],["meta",{"property":"article:published_time","content":"2024-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T07:18:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Widgets\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-23T07:18:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"狭雾\\",\\"url\\":\\"https://congvps.fun\\"}]}"]]},"headers":[{"level":2,"title":"编写Widgets","slug":"编写widgets","link":"#编写widgets","children":[]},{"level":2,"title":"配置Widgets","slug":"配置widgets","link":"#配置widgets","children":[]},{"level":2,"title":"激活widgets","slug":"激活widgets","link":"#激活widgets","children":[]},{"level":2,"title":"关闭widgets","slug":"关闭widgets","link":"#关闭widgets","children":[]},{"level":2,"title":"往widgets内传递数据","slug":"往widgets内传递数据","link":"#往widgets内传递数据","children":[]}],"git":{"createdTime":1729667896000,"updatedTime":1729667896000,"contributors":[{"name":"cong71925","email":"cong71925@gmail.com","commits":1}]},"readingTime":{"minutes":1.53,"words":460},"filePathRelative":"map/widgets.md","localizedDate":"2024年10月23日","autoDesc":true}');export{u as comp,k as data};
